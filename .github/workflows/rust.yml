name: Rust

on:
  push:
#    branches: [ release ]
    paths: 
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/.github/workflows/*'
  pull_request:
#    branches: [ release ]

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Update
      run: rustup update     
          
    - name: Build
      run: cargo build 
    
    - name: Run tests
      run: cargo test 

    - name: cargo deny
      run: |
        cargo install --locked cargo-deny 
        cargo deny check
    
    - name: ensure_no_std
      run: |
        RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install cargo-nono
        cargo nono check
        
    - name: cargo pants
      run: |
       cargo install --force cargo-pants
       cargo pants

    - name: cargo_udeps
      run: |        
        cargo install cargo-udeps --locked
        cargo +nightly udeps

    - name: cargo_outdated
      run: |  
        cargo install --locked cargo-outdated
        cargo outdated
        
    - name: cargo_spellchek
      run: |
        cargo install --locked cargo-spellcheck
        cargo spellcheck
        
    - name: rustfmt
      run: |
        rustup component add rustfmt
        cargo fmt --all -- --check

#    - name: cargo_unused_features
#      run: |
#        cargo install cargo-unused-features
#        unused-features analyze
       

#  security_audit:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - uses: actions-rs/audit-check@v1
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}

# ideas for future improvement
#
# [ ] cargo bloat (not suitable for automat
# [ ] cargo breaking (between minor releases wich should not break api)
# [x] cargo spellcheck
# [ ] cargo unused-features
# [ ] herbie (warnings for unstable floating point expressions)
# [ ] Prusti (verifies absence of e. g. panic!())
# [ ] Rudra (memory safety check)
# [ ] rust-audit (maybe contained in cargo deny or cargo pants)
# [x] rustfmt
# [ ] cargo-action-fmt (Converts cargo check (and clippy) JSON output to the GitHub Action error format)
